You're working on the Vaani project. Build a **complete "Forgot Password" system** using Resend to send reset links to student emails. Use this API key for Resend:  
`re_SNCK62iB_2cCRnThfJYcjmW49SjrTmenP`

‚ö†Ô∏è DO NOT change any working UI or unrelated code. Only implement what‚Äôs mentioned below, exactly as described.

---

üîê FUNCTIONALITY TO IMPLEMENT:

1. **Forgot Password Request:**
   - Create a page at `/forgot-password`.
   - It will show an input field for student email.
   - When submitted, check if the email exists in the student database.
   - If it does, generate a **secure token** (random + hashed) valid for **1 hour**.
   - Save token and expiry in a new `PasswordResetToken` table (linked to user ID).
   - Send an email using Resend with the subject:  
     **"Reset Your Password ‚Äì Vaani"**  
     And the content:  
     ```
     Hello,

     We received a request to reset your password. Click the button below to reset it:

     [Reset Password Button]

     This link is valid for 1 hour. If you didn‚Äôt request this, please ignore this email.

     ‚Äî Team Vaani
     ```
     The reset button should link to:  
     `https://vaani.replit.dev/reset-password/<token>`

2. **Reset Password Page:**
   - Create a page at `/reset-password/:token`
   - This page will ask the user to enter a new password (with validations: capital letters, symbols, numbers, minimum 8 characters).
   - When submitted:
     - Verify the token is valid and not expired.
     - If valid, update the student‚Äôs password in the DB.
     - Delete the token from the token table after use.
     - Show success message and redirect to login page.

---

üì¶ DATABASE SETUP:

- Create a new Prisma model called `PasswordResetToken`.
  - Fields: token (hashed), userId (foreign key), expiresAt.
- Link the token to the User model via `userId`.

---

üì© EMAIL SENDING:

- Use Resend with the provided API key.
- Use professional formatting with a Vaani brand touch (blue button, clear CTA).
- From email: `noreply@vaani.replit.dev`

---

üõ°Ô∏è SECURITY & VALIDATION:

- Token must be hashed before storing in DB.
- On token verification, match hashed version.
- Token expires after 1 hour ‚Äî reject if expired.
- Do not allow reuse.
- Do not reveal if an email exists or not on forgot-password UI (just show "If this email exists, you‚Äôll receive a reset link").

---

‚úÖ FLOW SUMMARY:

1. Student forgets password ‚Üí submits email.
2. If valid ‚Üí receives email with reset link.
3. Clicks link ‚Üí sets new password.
4. Token is deleted ‚Üí can log in again.

Make sure the implementation integrates smoothly with the current Vaani project, reuses the database and auth logic, and follows security best practices.

Again: do not touch existing UI design or unrelated code.